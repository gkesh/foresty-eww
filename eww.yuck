(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :class "segment-top"
         :valign "start"
      (top :screen screen))
    (box :valign "center"
         :class "middle" 
      (middle :screen screen))
    (box :valign "end"
         :class "segment-bottom" 
      (bottom :screen screen))))

(defwidget metric [icon ?font-size]
  (box :class "metric" 
       :orientation "v"
    (label :class "metric-icon" 
           :style {font-size != "" ? "font-size: ${font-size}rem;" : ""}
           :text icon)
    (box :class "metric-content"
      (children))))

(defwidget battery []
  (eventbox :onhover "bash -c '[[ $(./scripts/window-status.sh -w brightness_popup) -eq 1 ]] && eww close brightness_popup'"
    (box :class "metric"
        :orientation "v"
      (label :class "metric-icon metric-battery"
            :text battery_icon)
      (box :class "metric-content" battery_percent)
    )
  )
)

(defwidget power []
  (box :class "metric"
    (button :class "metric-icon metric-power"
            :tooltip "Rofi Power Menu"
            :onclick "rofi -show p -modi p:$HOME/.rofi-power-menu"
      "")))

(defwidget music-button []
  (button :style "font-size: 1.2em"
          :onclick "playerctl play-pause"
          :onrightclick "bash -c '[[ $(./scripts/window-status.sh -w music_popup) -eq 0 ]] && eww open music_popup || eww close music_popup'"
    "${music_data == "" ? "" : music_data.status == "Playing" ? "" : ""}"))

(defwidget top [screen]
  (box :orientation "v"
       :valign "start"
       :space-evenly true
       :spacing "5"

    (metric :icon "" (music-button))

    (workspaces :wsp_yuck {screen == 1 ? workspaces_1_yuck : workspaces_2_yuck})  
  ))

(defwidget workspaces [wsp_yuck]
  (literal :content wsp_yuck))

(defwidget middle [] (time))
(defwidget time []
  (box :orientation "v" 
       :class "time"
    hour min sec))

(defwidget bottom [screen] 
  (box :orientation "v"
       :valign "end"
       :space-evenly false
       :spacing "5"

    (system)

    (volume)

    (brightness)

    (battery)

    (box :class "metric" (date))
    
    (power)))


(defwidget system []
  (eventbox :onhover "bash -c '[[ $(./scripts/window-status.sh -w volume_popup) -eq 1 ]] && eww close volume_popup'"
    (box :orientation "v"
          :class "metric" 
          :vexpand "false" 
          :hexpand "false" 
          :space-evenly "true"
          :tooltip "m: ${round(EWW_RAM.used_mem_perc, 0)}% | p: ${round(EWW_CPU.avg, 0)}% | w: ${network_data.ap} (${network_data.strength}%)"
          ;:tooltip "Mem: ${round(EWW_RAM.used_mem_perc, 0)}% | CPU: ${round(EWW_CPU.avg, 0)}%"
          :spacing 8

      (circular-progress :value "${round(EWW_RAM.used_mem_perc, 0)}"
                          :class "circular_metric memory_metric"
                          :thickness 4
        (label :style "font-size: 12px; margin: 10px; font-family: 'Font Awesome 5 Free Solid', 'Font Awesome 5 Free';"
                :text ""))

      (circular-progress :value "${round(EWW_CPU.avg, 0)}"
                          :class "circular_metric cpu_metric"
                          :thickness 4
        (label :style "font-size: 12px; margin-right: 5px; margin-top: 2px; font-family: 'Hack Nerd Font';"
                :text ""))   

      (circular-progress :value "${network_data.strength}"
                          :class "circular_metric network_metric"
                          :thickness 4
        (label :style "font-size: 12px; margin: 0 10px; margin-top: 2px; font-family: 'Font Awesome 5 Free Solid', 'Font Awesome 5 Free';"
                :text ""))  
    )
  )
)

(defwidget brightness []
  (box :class "volume-metric"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (eventbox :onhover "eww close volume_popup; eww open brightness_popup"
              :vexpand true
              :valign "fill"
      (box :orientation "v"
           :valign "fill"
           :vexpand true
        (label :class "metric-icon"
                :style "font-family: 'Font Awesome 5 Free Solid', 'Font Awesome 5 Free';"
                :text "")
        (button :onclick ""
          "${brightness_percent}")))))

(defwidget volume []
  (box :class "volume-metric"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (eventbox :onhover "eww close brightness_popup; eww open volume_popup"
              :vexpand true
              :valign "fill"
      (box :orientation "v"
           :valign "fill"
           :vexpand true
        (label :class "metric-icon"
                :style "font-family: 'Font Awesome 5 Free Solid', 'Font Awesome 5 Free';"
                :text "")
        (button :onclick "pavucontrol &"
          "${volume}")))))

(defwidget large-sym [sym]
  (label :class "metric-icon large-symbol" :text sym))

(defwidget date []
  (box :orientation "v" 
       :halign "center"
       :class "metric-date" 
    day_word day month year))

(defpoll volume :interval "1s" :initial "0" "grun -vv")
(defpoll brightness :interval "1s" :initial "0" "lux -g")
(defpoll brightness_percent :interval "1s" :initial "0" "grun -sp | rev | cut -c 3- | rev")

(defpoll battery_icon :interval "1s" :initial "0" "grun -pi")
(defpoll battery_percent :interval "10s" :initial "0" "grun -pp | rev | cut -c 3- | rev")

(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")

(defvar workspaces_1_yuck "")
(defvar workspaces_2_yuck "")

(defwindow bar_1
  :monitor "eDP-1"
  :stacking "bg"
  :geometry (geometry :x -8 :y 8 :width "55px" :height "1424px")
  :anchor "top left"
  :reserve (struts :distance "50px" :side "left")
  (bar :screen 0))

;(defwindow bar_2
;  :monitor "HDMI-1"
;  :geometry (geometry :x 0 :y 0 :width "40px" :height "100%")
;  :anchor "top left"
;  :reserve (struts :distance "40px" :side "left")
;  (bar :screen 1))

; Wifi info
(defpoll network_data :interval "5s"
      :inital `{"ap": "N/A", "strength": "0"}`
      `
      bash ./scripts/wifi-info.sh
      `)

; Music Widget
(defpoll music_data :interval "0.5s"
  :initial `{"status": ""}`
  `
  playerctl metadata --format '{ "status": "{{status}}", "artist": "{{artist}}", "album": "{{album}}", "title": "{{title}}", "artUrl": "{{mpris:artUrl}}"}' || echo '{"status": ""}';
  `)

(defwidget music-popup []
  (box :halign "fill"
       :vexpand "false"
       :valign "fill"

    (eventbox :onhoverlost "eww close music_popup"
              :vexpand "false"
              :valign "fill"
              :hexpand "false"
              :halign "fill"

      (box :orientation "h" 
           :valign "fill"
           :vexpand "false"
           :space-evenly "false"
           :spacing 10

        (box :class "music_album_art" :vexpand "false" :hexpand "false" :style {music_data.artUrl == "" ? "background-image: url('./assets/music_placeholder.jpeg');": "background-image: url('${music_data.artUrl}');"})
        (box :class "music_content"
            :orientation "v"
            :spacing 0
            :space-evenly "false"
            :vexpand "false"
            :hexpand "false"
            
          (label :halign "start"
                :class "music_title"
                :wrap "true"
                :limit-width 35
                :text {music_data.status == "" ? "No music playing": "${music_data.title}"})

          (box :orientation "h"
              :space-evenly "false"
              :spacing 10
              
              (label :class "metric-icon" :text "")
              {music_data.status == "" ? "N/A": music_data.album == "null" || music_data.album == "" ? "N/A": "${music_data.album}"})
          
          (box :orientation "h"
              :space-evenly "false"
              :spacing 10
              
              (label :class "metric-icon" :text "")
              {music_data.status == "" ? "N/A": music_data.artist == "null" || music_data.artist == "" ? "N/A" : "${music_data.artist}"})
          
          (box :class "music_control"
              :orientation "h"
              :space-evenly "true"
              :halign "start"
              :spacing 20
              
              (button :class "music_control_button" :onclick "playerctl previous" "")
              
              (button :class "music_control_button"
                      :onclick "playerctl play-pause"
                "${music_data == "" ? "" : music_data.status == "Playing" ? "" : ""}")
                
              (button :class "music_control_button" :onclick "playerctl next" "")))))))

(defwindow music_popup
  :monitor "eDP-1"
  :anchor "bottom left"
  :geometry (geometry :x "50px" :y "8px" :height "180px" :width "560px")
  
  (music-popup))

; Volume Bar
(defwidget volume-popup []
  (eventbox :onhoverlost "eww close volume_popup"
            :vexpand true
            :valign "fill"
    (box :class "volume-metric"
       :orientation "v"
       :valign "fill"
       :vexpand false
       :width 40
      (scale :orientation "v" 
            :min 0
            :max 100
            :flipped "true"
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
            :value volume))))

(defwindow volume_popup
  :monitor "eDP-1"
  :anchor "bottom left"
  :geometry (geometry :x "50px" :y "1038px" :height "100px" :width "40px")
  (volume-popup))

; Brightness bar
(defwidget brighness-popup []
  (eventbox :onhoverlost "eww close brightness_popup"
            :vexpand true
            :valign "fill"
    (box :class "volume-metric"
       :orientation "v"
       :valign "fill"
       :vexpand false
       :width 40
      (scale :orientation "v"
            :min 0
            :max 24241
            :flipped "true"
            :onchange "lux -S {}"
            :value brightness))))

(defwindow brightness_popup
  :monitor "eDP-1"
  :anchor "bottom left"
  :geometry (geometry :x "50px" :y "1110px" :height "100px" :width "40px")
  (brighness-popup))